

http://www.pab-sh.cn/AFIS3/
https://uat.dulux-easypaint.com/login
https://www.dulux-easypaint.com/login
https://cm.dulux.com.cn/login.jsp
如今我又来到人生的十岔口，我知道，毫无例外，我都知道，哪条是正途。可我从来都不走，为什么？因为太他妈辛苦了！
有的鸟儿是注定关不住的，因为他们的羽毛太过锋芒！

深入JVM虚拟机

	集合、IO流、异常、多线程(同步-并发)
	SpringMVC、拦截器、过滤器、定时任务、Log4j
	html、css、JavaScript、ajax、json、JQuery、Bootstrap
	Mybatis、SQL
	AOP、IOC、事务
	jvm、GC、反射机制
	git、Maven、tomcat
	java8
	其它：数据源技术
	
	做过的项目
		Trading， 平安汽融
	字节
		1B（byte，字节）= 8 bit
		ASCII码：一个英文字母（不分大小写）占一个字节的空间，一个中文汉字占两个字节的空间
		Unicode编码：一个英文等于两个字节，一个中文（含繁体）等于两个字节
		UTF-8编码：一个英文字符等于一个字节，一个中文（含繁体）等于三个字节
	Object常用方法：
		equals,hashcode,toString,getClass,wait,notify,notifyAll,clone
	自动拆装箱：
		将基础类型与包装类的转换
	Java常用包:
		Java.lang
		Java.io
		Java.sql
		Java.util
		Java.awt
		Java.net
		Java.math
	IO流
		InputStream
			FileInputStream
			BufferedInputStream
		OutputStream
			FileOutputStream
			BufferedOutputStream
		Reader
			InputStreamReader
				FileReader
			BufferedReader
		Writer
			OutputStreamWriter
				FileWriter
			BufferedWriter
	
	jsp有哪些内置对象?作用分别是什么： 
		application servlet 正在执行的内容 
		session 与请求有关的会话期 
		request 用户端请求，此请求会包含来自GET/POST请求的参数 
		response 网页传回用户端的回应 
		pageContext 网页的属性是在这里管理 
		out 用来传送回应的输出 
		config servlet的构架部件 
		page JSP网页本身 
		exception 针对错误网页，未捕捉的例外。
	Request对象的主要方法：
		setAttribute(String name,Object)：设置名字为name的request的参数值
		getAttribute(String name)：返回由name指定的属性值
		getAttributeNames()：返回request对象所有属性的名字集合，结果是一个枚举的实例
		getCookies()：返回客户端的所有Cookie对象，结果是一个Cookie数组
		getCharacterEncoding()：返回请求中的字符编码方式
		getContentLength()：返回请求的Body的长度
		getHeader(String name)：获得HTTP协议定义的文件头信息
		getHeaders(String name)：返回指定名字的request Header的所有值，结果是一个枚举的实例
		getHeaderNames()：返回所以request Header的名字，结果是一个枚举的实例
		getInputStream()：返回请求的输入流，用于获得请求中的数据
		getMethod()：获得客户端向服务器端传送数据的方法
		getParameter(String name)：获得客户端传送给服务器端的有name指定的参数值
		getParameterNames()：获得客户端传送给服务器端的所有参数的名字，结果是一个枚举的实例
		getParameterValues(String name)：获得有name指定的参数的所有值
		getProtocol()：获取客户端向服务器端传送数据所依据的协议名称
		getQueryString()：获得查询字符串
		getRequestURI()：获取发出请求字符串的客户端地址
		getRemoteAddr()：获取客户端的IP地址
		getRemoteHost()：获取客户端的名字
		getSession([Boolean create])：返回和请求相关Session
		getServerName()：获取服务器的名字
		getServletPath()：获取客户端所请求的脚本文件的路径
		getServerPort()：获取服务器的端口号
		removeAttribute(String name)：删除请求中的一个属性
			
	char型变量中能不能存贮一个中文汉字?为什么： 
		是能够定义成为一个中文的，因为java中以unicode编码，一个char占16个字节，所以放一个中文是没问题的。
	java中是值传递引用传递？
		java都是引用传递，对于基本数据类型，传递是值的副本，而不是值本身。
		对于对象类型，传递是对象的引用，当在一个方法操作操作参数的时候，其实操作的是引用所指向的对象。
	String类的常用方法有那些？
		charAt：返回指定索引处的字符
		indexOf()：返回指定字符的索引
		replace()：字符串替换
		trim()：去除字符串两端空白
		split()：分割字符串，返回一个分割后的字符串数组
		getBytes()：返回字符串的byte类型数组
		length()：返回字符串长度
		toLowerCase()：将字符串转成小写字母
		toUpperCase()：将字符串转成大写字符
		substring()：截取字符串
		format()：格式化字符串
		equals()：字符串比较
	当父类引用指向子类对象的时候，访问的属性是父类的属性，调用的方法是子类的方法
*	说一说Servlet的生命周期： 
		servlet有良好的生存期的定义，包括加载和实例化、初始化、处理请求以及服务结束。这个生存期由javax.servlet.Servlet接口的init,service和destroy方法表达。
	servlet执行流程
		客户端发出http请求，web服务器将请求转发到servlet容器，servlet容器解析url并根据web.xml找到相对应的servlet，并将request、response对象传递
		给找到的servlet，servlet根据request就可以知道是谁发出的请求，请求信息及其他信息，当servlet处理完业务逻辑后会将信息放入到response并响应到客户端。
？	你在项目中用到了xml技术的哪些方面?如何实现的： 
		用到了数据存贮，信息配置两方面。在做数据交换平台时，将不能数据源的数据组装成XML文件，然后将XML文件压缩打包加密后通过网络传送给接收者，接收解密与解压缩后再同XML文
		件中还原相关信息进行处理。在做软件配置时，利用XML可以很方便的进行，软件的各种配置参数都存贮在XML文件中。
*	常用的23种设计模式？说明工厂模式： 
		1，Factory（工厂模式），Builder（建造模式）， Factory Method（工厂方法模式），Prototype（原始模型模式），Singleton（单例模式）， 
		Facade（门面模式），Adapter（适配器模式）， Bridge（桥梁模式）， Composite（合成模式），Decorator（装饰模式）， Flyweight（享元模式），
		Proxy（代理模式），Command（命令模式）， Interpreter（解释器模式）， Visitor（访问者模式），Iterator（迭代子模式）， Mediator（调停者模式），
		Memento（备忘录模式），Observer（观察者模式），State（状态模式），Strategy（策略模式），Template Method（模板方法模式），
		Chain Of Responsibleity（责任链模式）。
		2，工厂模式：工厂模式是一种经常被使用到的模式，根据工厂模式实现的类可以根据提供的数据生成一组类中某一个类的实例，通常这一组类有一个公共的抽象父类并且实现了相同的方法，
		但是这些方法针对不同的数据进行了不同的操作。首先需要定义一个基类，该类的子类通过不同的方法实现了基类中的方法。然后需要定义一个工厂类，工厂类可以根据条件生成不同的子
		类实例。当得到子类的实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。
		a) 单例模式：单例模式核心只需要new一个实例对象的模式，比如数据库连接，在线人数等，一些网站上看到的在线人数统计就是通过单例模式实现的，把一个计时器存放在数据库或者
		内存中，当有人登陆的时候取出来加一再放回去，有人退出登陆的时候取出来减一再放回去，但是当有两个人同时登陆的时候，会同时取出计数器，同时加一，同时放回去，这样的话数据就
		会错误，所以需要一个全局变量的对象给全部人使用，只需要new出一个实例对象，这就是单例模式的应用，并且单例模式节省资源，因为它控制了实例对象的个数，并有利于gc回收。
		b) 策略模式：就是将几个类中公共的方法提取到一个新的类中，从而使扩展更容易，保证代码的可移植性，可维护性强。比如有个需求是写鸭子对象，鸭子有叫，飞，外形这三种方法，
		如果每个鸭子类都写这三个方法会出现代码的冗余，这时候我们可以把鸭子中的叫，飞，外形这三个方法提取出来，放到鸭父类中，让每个鸭子都继承这个鸭父类，重写这三个方法，这样封
		装的代码可移植性强，当用户提出新的需求比如鸭子会游泳，那么对于我们oo程序员来讲就非常简单了我们只需要在鸭父类中加一个游泳的方法，让会游泳的鸭子重写游泳方法就可以了。
		c) 工厂模式：简单的工厂模式主要是统一提供实例对象的引用，通过工厂模式接口获取实例对象的引用。比如一个登陆功能，后端有三个类，controller类，interface类，
		实现接口的实现类。当客户端发出一个请求，当请求传到controller类中时，controller获取接口的引用对象，而实现接口的实现类中封装好了登陆的业务逻辑代码。当你需要
		加一个注册需求的时候只需要在接口类中加一个注册方法，实现类中实现方法，controller获取接口的引用对象即可，不需要改动原来的代码，这种做法是的可拓展性强。
	Java中的HashMap的工作原理是什么？
		Java中的HashMap是以键值对(key-value)的形式存储元素的。HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合/从集合添加和
		检索元素。当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value会被更新成新值。
	数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？
		1，Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。
		2，Array大小是固定的，ArrayList的大小是动态变化的。
		3，ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。
		4，对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。
		5，数组最适合的场合是多维数组，arraylist用多维的话，非常麻烦。
	finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？
		在释放对象占用的内存之前，垃圾收集器会调用对象的finalize()方法。一般建议在该方法中释放对象持有的资源。
	Collection和Collections的区别：
		Collections是个java.util下的类，它包含有各种有关集合操作的静态方法。 
		Collection是个java.util下的接口，它是各种集合结构的父接口。
	error和exception有什么区别：  
		1，Error和Exception都是java错误处理机制的一部分，都继承了Throwable类。
		2，error，表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况； 
		3，exception，表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。
	给我一个你最常见到的runtime exception：   
		NullPointerException, ClassCastException, IndexOutOfBoundsException, ArithmeticException, 
		ArrayStoreException, BufferOverflowException, BufferUnderflowException, CannotRedoException, 
		CannotUndoException, CMMException,  ConcurrentModificationException,  DOMException,  
		EmptyStackException, IllegalArgumentException, IllegalMonitorStateException, 
		IllegalPathStateException, IllegalStateException,  ImagingOpException,   
		MissingResourceException,  NegativeArraySizeException, NoSuchElementException, 
		ProfileDataException, ProviderException, RasterFormatException, 
		SecurityException, SystemException, UndeclaredThrowableException, UnmodifiableSetException, 
		UnsupportedOperationException。
	使用连接池有什么好处？
		数据库连接是非常消耗资源的，影响到程序的性能指标。连接池是用来分配、管理、释放数据库连接的，可以使应用程序重复使用同一个数据库连接，而不是每次都创建
		一个新的数据库连接。通过释放空闲时间较长的数据库连接避免数据库因为创建太多的连接而造成的连接遗漏问题，提高了程序性能。
	事物的理解
		事物具有原子性，一致性，持久性，隔离性
		1)原子性：是指在一个事物中，要么全部执行成功，要么全部失败回滚
		2)一致性：事物执行之前和执行之后都处于一致性状态
		3)持久性：事物多数据的操作是永久性
		4)隔离性：当一个事物正在对数据进行操作时，另一个事物不可以对数据进行操作，也就是多个并发事物之间相互隔离。
	接口
		前言：接口定义了一种规范，接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部状态数据，也不关心这些类里方法的实现细节，它只规定这批类里必须提供
			某些方法，提供这些方法的类就可以满足实际需要；由于接口定义的是一种规范，因此接口里不能包含构造器和初始化块定义，接口里可以包含成员变量（只能是静
			态常量）、方法（只能是抽象实例方法、类方法或默认方法）、内部类（包括内部接口、枚举）定义，它比类的成员少了两种。
			(类中的成员包括成员变量，成员函数，构造函数，构造代码块，静态成员，静态代码块)
		说明：
		(1)修饰符可以是public或者省略，如果省略了public访问控制符，则默认采用包权限访问控制符，即只有在相同包结构下才可以访问该接口
		(2)一个接口可以有多个直接父接口，但接口只能继承接口，不能继承类
*		(3)接口里的方法只能是抽象方法，只有在Java 8 以上的版本中才允许在接口中定义默认方法、类方法
		(4)接口里定义的是多个类共同的公共行为规范，因此接口里的所有成员包括常量、方法、内部类和内部枚举都是public访问权限，可以省略public
		(5)接口里的成员默认是使用public static final修饰的，因此即使另一个类处于不同包下，也可以通过接口来访问接口里的成员变量
		(6)接口里定义的方法只能是抽象方法、类方法或默认方法，因此如果不是定义默认方法，系统将自动为普通方法增加abstract修饰符；
			定义接口里的普通方法时不管是否使用public abstract修饰符，接口里的普通方法总是使用public abstract来修饰；
			接口里的普通方法不能有方法实现（方法体）；但类方法、默认方法都必须由方法实现（方法体）。
x		(7)接口里定义的内部类、内部接口、内部枚举类都默认采用public static两个修饰符，
			不管定义时是否指定这两个修饰符，系统都会自动使用public static对它们进行修饰。
			public interface Output{
			    //接口里定义的成员变量只能是常量，系统会自动为这些成员变量增加public static final修饰符
			    //又因为没有构造器和初始化块，成员变量只能在定义时指定默认值
			    int MAX_CACHE_LINE = 50;	//public static final int MAX_SIZE = 50;
			    //接口里定义的普通方法只能是public的抽象方法
			    void out();
			    void getData(String msg);
			    //在接口中定义默认方法，需要使用default修饰
			    default void test(){
			        System.out.println("默认的test()方法");
			    }
			    //在接口中定义类方法，需要使用static修饰
			    static String staticTest(){
			        return "接口里的类方法";
			    }
			}
*		(8)Java 8允许在接口里定义默认方法，默认方法必须使用default修饰，该方法不能使用static修饰，无论程序是否指定，默认方法总是使用public修饰
*		(9)Java 8允许在接口中定义类方法，类方法必须使用static修饰，该方法不能使用default修饰，无论程序是否指定，类方法总是使用public修饰
		(10)接口的继承和类继承不一样，接口完全支持多继承，即一个接口可以有多个直接父接口，使用extends关键字，多个父接口之间以(,)隔开
		(11)因为接口里方法都是public的，而子类重写父类方法时访问控制符只能更大或者相等，所以实现类实现接口里方法时只能使用public访问权限
		与抽象类相同点：
		(1)接口和抽象类都不能被实例化，它们都位于继承树的顶端，用于被其他类实现和继承
		(2)接口和抽象类都可以包含抽象方法，实现接口或继承抽象类的普通类都必须实现这些抽象方法。
		与抽象类不同点：
			接口作为系统与外界交互的窗口，接口体现的是一种规范，当在一个程序中使用接口时，接口是多个模块间的耦合标准，当在多个应用程序之间使用接口时，接口
		 	是多个程序之间的通信标准；抽象类则不一样，抽象类作为系统中多个子类的共同父类，它所体现的是一种模板式的设计
		(1)接口里只能包含抽象方法，不能为普通方法提供方法实现（默认方法可以提供方法实现）；抽象类则可以包含普通方法。
		(2)接口里只能定义常量，不能定义普通成员变量；抽象类里则即可以定义普通成员变量，也可以定义静态常量。
		(3)接口里不包含构造器；抽象类可以包含构造器，抽象类里的构造器并不是用于创建对象，而是让其子类调用这些构造器来完成属于抽象类的初始化操作。
		(4)接口里不能包含初始化块；但抽象类则可以完全包含初始化块
		(5)抽象类和普通类一样，只能继承一个父类，但不能继承接口；接口可继承多个父接口，但不能继承类。
		(6)一个类只能有一个直接父类，包括抽象类；但一个类可以实现多个接口，通过实现多个接口可以弥补Java单继承的不足。
	
	线程的几种可用状态。
		线程在执行过程中，可以处于下面几种状态：
		就绪(Runnable):线程准备运行，不一定立马就能开始执行。
		运行中(Running)：进程正在执行线程的代码。
		等待中(Waiting):线程处于阻塞的状态，等待外部的处理结束。
		睡眠中(Sleeping)：线程被强制睡眠。
		I/O阻塞(Blocked on I/O)：等待I/O操作完成。
		同步阻塞(Blocked on Synchronization)：等待获取锁。
		死亡(Dead)：线程完成了执行。	
	线程池
		线程池的实现原理，这个知识点真的很重要，几乎每次面试都会被问到，一般的提问方式有如下几种
	锁的实现
		0，在关于锁的面试过程中，一般主要问Synchronized和ReentrantLock的实现原理，更有甚者会问读写锁
			(1)Synchronized是关键字，ReentrantLock是类；故ReentrantLock更灵活。
			(2)ReentrantLock灵活表现：可以对获取锁的等待时间进行设置，这样就避免了死锁；可以获取各种锁的信息。
		1，悲观锁：每次拿数据都认为别人会修改数据，所以每次拿都要加上锁。synchronized和传统的关系型数据库都是悲观锁
		       乐观锁：每次拿数据都认为别人不会修改数据，所以每次拿都不加锁，但在修改数据时会判断数据是否被修改。CAS是乐观锁
		2， CAS	(compare and swap)
		  	(1)原理：告诉我位置V的当前位置是否是A，如果是则将值更改为B，否则不做处理并告诉我位置V的当前值。
		  	(2)缺陷：
		  		ABA问题；
		  		自旋开销大，即不成功会一直执行，直到成功。
		  	(3)对比synchronized使用场景：
		  		对于竞争资源较严重时，CAS自旋概率大，消耗资源多，故其效率低于synchronized；反之CAS效率高。
		3，volatile
			与synchronized相比，它是轻量级的，修饰共享变量，将变量保存到主内存(main memory)中，保证共享变量对所有线程的可见性。
		4，synchronized
			(1)修饰代码块 	synchronized(this){...}
			(2)修饰方法	public synchronized static void method() {...}
			(3)修改类		synchronized(SyncTest2.class) {...}
		5，线程安全
			如果代码在多线程下执行和在单线程下执行永远都能获得一样的结果，那么这个代码就是线程安全的
		6，sleep方法和wait方法有什么区别
			都是放弃CPU一段时间，但sleep是不会放弃这个对象的监视器，即是抱着锁睡觉的，其它线程是获取不到资源的；wait会立即放弃对象的监视器。
		7，生产者消费者模型的理论
			(1)平衡生产者的生产能力和消费者的消费能力，提高系统性能。
			(2)解耦，降低生产者和消费者之间的联系及制约。

	自己定义拦截器
		实现接口,另外一种是继承适配器类 HandlerInterceptorAdapter
	SpringMvc处理返回值
		配置文件中InternalResourceViewResolver的前缀和后缀
	当一个方法向AJAX返回特殊对象
		加上@ResponseBody注解
	error和exception有什么区别：  
		error表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况；
		exception表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。
	swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上？
		switch（expr1）中，expr1是一个整数表达式。因此传递给 switch 和 case 语句的参数应该是 int、 short、 char 或者 byte。
		long,string 都不能作用于swtich。
	并发、并行区别
		并发：多个线程被一个CPU执行
		并行：多个线程被多个CPU执行
	分布、集群
		分布：一个业务拆分成若干个子业务，部署在不同的服务器上
		集群：同一个业务部署在多个服务器上
	网站高并发性能优化
		硬件：增加带宽，宽容CPU、扩容内存，
		软件：合理合并js文件以减少IO读取次数，数据库读取上选用radis缓存
	定时任务Quertz
		quartz.SchedulerFactoryBean
	数据库连接池
		dbcp.BasicDataSource
	数据库事物
		transactionManager
	Mybatis配置
		SqlSessionFactoryBean
	IOC
		传统我们通过new来创建一个对象，现在由spring容器帮我们依赖注入对象，即由原先的人为控制转为容器控制。
	AOP
		优点提高效率，AOP将业务逻辑各部分进行划分隔离，提高程序可重用性。例如通过AOP可将日志、事物等从业务逻辑层抽取出来(省去传统的繁琐)
	进程和线程
		进程：是系统分配和管理资源的基本单位，它包含若干个线程
		线程：线程是CPU调度和分派的基本单位，是进程的组成部分
		区别：
			(1)调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位。
			(2)并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可以并发执行。
			(3)拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。
			(4)系统开销：在创建或撤销进程的时候，由于系统都要为之分配和回收资源，导致系统的明显大于创建或撤销线程时的开销。但进程有独立的地址空间，进程
			         崩溃后，在保护模式下不会对其他的进程产生影响，而线程只是一个进程中的不同的执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址
			         空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但是在进程切换时，耗费的资源较大，效率要差些。
	序列化和反序列化
		1，通过实现接口Serializable来序列化，使用ObjectInputStream 实现反序列化；
		2，序列化是将java对象和一串二进制字节流之间做转换，java对象只存在jvm中，当程序退出时，这些对象也就消失，而序列化则是将这些对象保存到磁盘
		       中，以备使用。
	反射机制
		(除了使用new创建对象之外，还可以用反射创建对象)
		定义：指程序在运行时可检测、修改或调整自身状态或行为的一种能力，在java中，只要给出类的名称，便可以访问类的所有属性；
		作用：
			(1)在运行时可检测任意对象所属的类；
			(2)在运行时访问类的对象；
			(3)在运行时访问对象的所有属性、方法、构造方法。
		引出两个编译概念
			静态编译：在编译时确定类型，绑定对象
			动态编译：在运行时确定类型，绑定对象
		优点：可以动态创建对象和编译，提高代码灵活性
		优点举例：一个大型项目，程序编译且发布后，需要更新某新功能，此时不可能卸载老版本，重新装新版本。可采用反射机制动态创建和编译。
		缺点：使用反射机制是一种解释操作，让jvm按照要求操作，这比直接执行相同的操作要慢，故影响性能
	Redis:
		1，是一个key-value的内存数据库，减少磁盘I/O读写，读写非常快，异步将数据保存到磁盘中，故有快速和持久化得特征。
		2，但数据库容量受物理内存的限制，适合小数据量的高并发和运算上；如果数据量很大，可以考虑分布式或其他数据库
		3，数据已有记录数达到内存限值后不能继续插入新值
		4，单进程单线程的，redis利用队列技术将并发访问变为串行访问，消除了传统数据库串行控制的开销
		5，支持多种数据类型(5种：String，List，Set，Hash，Sort Set)
		6，单个value值可达1GB	
		6，支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行
		7，分布式：
			redis支持主从的模式。原则：Master会将数据同步到slave，而slave不会将数据同步到master。Slave启动时会连接master来同步数据。
			这是一个典型的分布式读写分离模型。我们可以利用master来插入数据，slave提供检索服务。这样可以有效减少单个机器的并发访问数量
		8，回收策略：
			volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
			volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
			volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
			allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰
			allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
			no-enviction（驱逐）：禁止驱逐数据
		9，使用场景
			会话缓存、队列、排行榜/计数器、发布/订阅
			
	springMVC启动流程
		简单分为两个初始化
		1，监听器ContextLoaderListener的初始化，它实现了接口ServletContextListener，当服务器启动时，调用其ContextIniti..方
		       法，自动装配ApplicationContext配置信息，并完成载入和初始化过程，此初始化的第一个上下文即为根上下文，它将绑定到web程序中的
		  ServletContext中，为后续的IOC容器提供宿主。IOC容器是通过调用refleash方法载入的，该方法主要完成以下3件事：
		   (1)定位Resource文件路径，找到bean配置文件；
		   (2)通过特殊的reader解析bean配置文件，抽象成beanDefinition类
		   (3)将beanDefinition向容器注册，保存在HashMap中，供后续使用
		2，DispatcherServlet的初始化，首先它是一个Servlet，是HttpServlet的子类，当web程序启动时，调用其init方法，进行初始化，
		  DispatcherServlet在建立自己的(持有IOC容器的)上下文前，先获得根上下文，初始化过程大概是初始化处理器映射器、视图解析器等。完成初始化
		      后，将之保存到ServletContext中，供后续使用。
		  --另外，IOC中的若干个Servlet都有自己独立的bean空间
	springMVC工作流程
		1，用户发出url访问请求到中央控制器DispatcherServlet
		2，中央控制器找到处理器映射器HandlerMapper
		3，处理器映射器根据url信息返回相应处理器适配器地址信息给中央控制器(如果有处理器拦截器，则一并生成)
		5，中央控制器找到处理器适配器HandlerAdapter
		6，处理器适配器经过数据转化、格式化等转交给Handler，即Controller
		7，Handler处理相关业务，返回ModelAndView给处理器适配器
		8，处理器适配器将结果返回给中央控制器
		9，中央控制器再找到视图解析器ViewReslover
		10，viewReslover解析后返回具体View到中央控制器
		11，中央控制器将view渲染响应给用户
	类加载的过程
		遇到一个新的类时，首先会到方法区去找class文件，如果没有找到就会去硬盘中找class文件，找到后会返回，将class文件加载到方法区中，在类加载的时候，静态成员变量会被
		分配到方法区的静态区域，非静态成员变量分配到非静态区域，然后开始给静态成员变量初始化，赋默认值，赋完默认值后，会根据静态成员变量书写的位置赋显示值，然后执行静态代码。
		当所有的静态代码执行完，类加载才算完成。
	对象的创建
		a)遇到一个新类时，会进行类的加载，定位到class文件
		b)对所有静态成员变量初始化，静态代码块也会执行，而且只在类加载的时候执行一次
		c)New 对象时，jvm会在堆中分配一个足够大的存储空间
		d)存储空间清空，为所有的变量赋默认值，所有的对象引用赋值为null
		e)根据书写的位置给字段一些初始化操作
		f)调用构造器方法（没有继承）
	JVM
		前言：内部体系结构分三部分：类装载器(ClassLoader)子系统，运行时数据区，执行引擎
		1，类装载器，负责加载程序中的类和接口，并赋予唯一的名字
		2，执行引擎，每个jvm都有一个执行引擎来执行被加载类的指令
		3，运行时数据区包括：方法区、堆、java栈、本地方法栈、PC寄存器
			(1)方法区和堆由所有线程共享
				堆：存放所有程序运行时创建的对象
					Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
				方法区：即为永久带，存放了加载类的信息(名称、修饰符等)、类中静态变量、final常量、类中的Field信息、类中的方法信息；
					在一定条件下也会被GC(废弃常量和无用类)，当方法区域需要使用的内存超过其允许的大小时，会抛出OutOfMemory的错误信息。
					Exception in thread "main" java.lang.OutOfMemoryError: PermGen space
			(2)java栈和PC寄存器由线程独享
				栈：是存放线程调用方法时存储局部变量表，操作，方法出口等与方法执行相关的信息
					Exception in thread "main" java.lang.StackOverflowError
			(3)本地方法栈，存储本地方法调用的状态
	GC：GC在什么时候，对什么东西，做了什么事情？
		1，minor gc：eden满了，对新生代GC；full gc：升到老年代的对象大于老年代剩余空间等，对老年代GC
		2，GC roots不可达的对象，即对象到GC roots没有任何引用链链接；可做GC roots的对象有：
			(1)虚拟机栈（栈帧中的本地变量表）中的引用的对象
			(2)方法区中的类静态属性引用的对象
			(3)方法区中的常量引用的对象
			(4)本地方法栈中JNI（Native方法）的引用对象
		3，回收算法
			(1)复制算法进行垃圾回收... 新生代(Eden Survivor1 Survivor2)		老年代
				缺点：复制算法中老年代中的对象存活交久，故复制的成本交高；
			(2)标记整理算法，又叫标记压缩算法，是对老年代的回收。先标记GC roots可达对象，并将这些对象压缩到内存的一端，再对其它区域清理回收
		4，引申垃圾回收器
			(1)CMS收集器，收集范围是老年代，基于标记-清除算法，故易产生大量空间碎片，分配大对象时不得不full GC。
			         四个步骤：
				初始标记(initial mark)			快，stop the world
				并发标记(concurrent mark)		快，stop the world
				重新标记(remark)				慢，但可以和用户进程同时工作
				并发清除(concurrent sweep)		慢，但可以和用户进程同时工作
			(2)G1收集器，JDK1.7提供的，收集范围是java堆(包括新生代、老年代)，基于标记-整理算法，所以没有碎片

	OSI
		应用层	Boss		用户
		表示层	秘书			解析、加密、翻译等
		会话层	外联部管理		负责地址信息和联系方式
		传输层	快递收发负责人	TCP/UDP协议
		网络层	集散中心		IP
		数据链路层				
		物理层	交通工具
		
	java8新特性
		1，异常捕获的try...cache可以自动关闭在try中打开的对象
		2，java8之前一个注解在一个位置只能标注一次，java8允许标注多次
		3，forEach
			list1.forEach(System.out :: println);
			map1.forEach((key,value) -> System.out.println("key="+key+";value="+value));
		
		
	网络协议：
		HTTP：超文本传输协议
		FTP：文件传输协议
		SMPT：简单邮件协议
		TELNET：远程终端协议
		POP3：邮件读取协议
		
		
		
		
		
		
		
		
